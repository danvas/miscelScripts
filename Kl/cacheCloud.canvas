{
  "objectType" : "Graph",
  "metadata" : {
    "timeline_timerFps" : "1000",
    "camera_mat44" : "{\n  \"row0\" : {\n    \"x\" : 0.7999999523162842,\n    \"y\" : -0.2228344082832336,\n    \"z\" : 0.5570860505104065,\n    \"t\" : 30\n    },\n  \"row1\" : {\n    \"x\" : -1.490116119384766e-08,\n    \"y\" : 0.9284766912460327,\n    \"z\" : 0.3713906705379486,\n    \"t\" : 20\n    },\n  \"row2\" : {\n    \"x\" : -0.6000000834465027,\n    \"y\" : -0.2971125543117523,\n    \"z\" : 0.7427813410758972,\n    \"t\" : 40\n    },\n  \"row3\" : {\n    \"x\" : 0,\n    \"y\" : 0,\n    \"z\" : 0,\n    \"t\" : 1\n    }\n  }",
    "timeline_start" : "1",
    "timeline_loopMode" : "1",
    "uiGraphZoom" : "{\n  \"value\" : 0.9107599854469299\n  }",
    "timeline_simMode" : "0",
    "camera_focalDistance" : "53.85164642333984",
    "timeline_current" : "1",
    "timeline_end" : "50",
    "uiGraphPan" : "{\n  \"x\" : 32.51238250732422,\n  \"y\" : 28.82236480712891\n  }"
    },
  "title" : "",
  "ports" : [
    {
      "objectType" : "Port",
      "metadata" : {},
      "nodePortType" : "In",
      "name" : "value",
      "execPortType" : "Out",
      "typeSpec" : "String"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "instance",
      "execPortType" : "Out",
      "typeSpec" : "InlineInstance"
      }
    ],
  "extDeps" : {},
  "nodes" : [
    {
      "objectType" : "Inst",
      "metadata" : {
        "uiGraphPos" : "{\"x\":788.0,\"y\":71.55039215087891}"
        },
      "name" : "DrawPoints_2",
      "ports" : [
        {
          "objectType" : "InstPort",
          "nodePortType" : "IO",
          "name" : "exec"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "IO",
          "name" : "this"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "name"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "transform"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "points"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "dummyResult"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "instance"
          }
        ],
      "executable" : "Fabric.Exts.InlineDrawing.DrawingHandle.DrawPoints",
      "presetGUID" : "1373D9009ABCAD45704CD9DDD2FB571D"
      },
    {
      "objectType" : "Inst",
      "metadata" : {
        "uiGraphPos" : "{\"x\":558.7160034179688,\"y\":203.2476501464844}"
        },
      "name" : "getPoints",
      "ports" : [
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "points"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "pointsDesc"
          }
        ],
      "definition" : {
        "objectType" : "Func",
        "title" : "getPoints",
        "ports" : [
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "points",
            "execPortType" : "Out",
            "typeSpec" : "Points"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "pointsDesc",
            "execPortType" : "Out",
            "typeSpec" : "String"
            }
          ],
        "extDeps" : {
          "FileIO" : "*",
          "Util" : "*",
          "Geometry" : "*"
          },
        "code" : "require FileIO;
require Util;
require Geometry;


// Definitions

function Vec3 getVec3(String x, String y, String z)
{
  return Vec3(x.toScalar(), y.toScalar(), z.toScalar());
}

dfgEntry 
{
  FilePath sourcePath = FilePath(\"/Users/danvas/Projects/maya/cacheCloudTesting/data/HoC_AnimationData1_v1.0/1_short.csv\");
  points = Points();
  
  if(sourcePath.exists())
  {
    TextReader reader = TextReader(sourcePath.string());
    
    
    while(!reader.eof())
    {
      String line = reader.readLine();  
      String splitLine[] = line.split(',');

      if(splitLine.size() >= 3)
      {
        Vec3 point;
        point = getVec3(splitLine[0], splitLine[1], splitLine[2]);
        points.addPoint(point);
      }
    }
  
    
  }
  pointsDesc = points.getDesc(true, false);
}
"
        }
      },
    {
      "objectType" : "Inst",
      "metadata" : {
        "uiGraphPos" : "{\"x\":795.759033203125,\"y\":303.0253601074219}"
        },
      "name" : "Report_1",
      "ports" : [
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "value"
          }
        ],
      "executable" : "Fabric.Core.Func.Report",
      "presetGUID" : "E9448726588111C443C34B2F3D9B0172"
      }
    ],
  "connections" : {
    "DrawPoints_2.instance" : [
      "instance"
      ],
    "getPoints.points" : [
      "DrawPoints_2.points"
      ],
    "getPoints.pointsDesc" : [
      "Report_1.value"
      ],
    "Report_1.value" : [
      "value"
      ]
    },
  "requiredPresets" : {
    "Fabric.Exts.InlineDrawing.DrawingHandle.DrawPoints" : {
      "objectType" : "Func",
      "metadata" : {
        "uiDocUrl" : "http://docs.fabric-engine.com/FabricEngine/2.1.0/HTML/KLExtensionsGuide/InlineDrawing/DrawingHandle.html",
        "uiTooltip" : "helper function to draw a points object given a color + a single transform\n\n Supported by DrawingHandle"
        },
      "title" : "DrawPoints",
      "ports" : [
        {
          "objectType" : "Port",
          "nodePortType" : "IO",
          "name" : "exec",
          "execPortType" : "IO",
          "typeSpec" : "Execute"
          },
        {
          "objectType" : "Port",
          "nodePortType" : "IO",
          "name" : "this",
          "execPortType" : "IO",
          "typeSpec" : "DrawingHandle"
          },
        {
          "objectType" : "Port",
          "nodePortType" : "Out",
          "name" : "name",
          "execPortType" : "In",
          "typeSpec" : "String"
          },
        {
          "objectType" : "Port",
          "metadata" : {
            "uiColor" : "{\n  \"r\" : 249,\n  \"g\" : 157,\n  \"b\" : 28\n  }"
            },
          "nodePortType" : "Out",
          "name" : "transform",
          "execPortType" : "In",
          "typeSpec" : "Xfo"
          },
        {
          "objectType" : "Port",
          "metadata" : {
            "uiColor" : "{\n  \"r\" : 51,\n  \"g\" : 1,\n  \"b\" : 106\n  }"
            },
          "nodePortType" : "Out",
          "name" : "points",
          "execPortType" : "In",
          "typeSpec" : "Points"
          },
        {
          "objectType" : "Port",
          "metadata" : {
            "uiColor" : "{\n  \"r\" : 255,\n  \"g\" : 242,\n  \"b\" : 0\n  }"
            },
          "nodePortType" : "In",
          "name" : "dummyResult",
          "execPortType" : "Out",
          "typeSpec" : "Vec3"
          },
        {
          "objectType" : "Port",
          "nodePortType" : "In",
          "name" : "instance",
          "execPortType" : "Out",
          "typeSpec" : "InlineInstance"
          }
        ],
      "extDeps" : {
        "InlineDrawing" : "*",
        "FabricInterfaces" : "*"
        },
      "presetGUID" : "1373D9009ABCAD45704CD9DDD2FB571D",
      "code" : "require InlineDrawing;

dfgEntry {
  this.drawPoints(name, transform, points, dummyResult, instance);
}
"
      },
    "Fabric.Core.Func.Report" : {
      "objectType" : "Func",
      "metadata" : {
        "uiNodeColor" : "{\n  \"r\" : 214,\n  \"g\" : 191,\n  \"b\" : 103\n  }",
        "uiAlwaysShowDaisyChainPorts" : "true",
        "uiHeaderColor" : "{\n  \"r\" : 188,\n  \"g\" : 129,\n  \"b\" : 83\n  }"
        },
      "title" : "Report",
      "ports" : [
        {
          "objectType" : "Port",
          "nodePortType" : "Out",
          "name" : "value",
          "execPortType" : "In",
          "typeSpec" : "$TYPE$"
          }
        ],
      "extDeps" : {},
      "presetGUID" : "E9448726588111C443C34B2F3D9B0172",
      "code" : "
dfgEntry {
	report(value);
}
"
      }
    },
  "args" : [
    {
      "type" : "String",
      "value" : null
      },
    {
      "type" : "InlineInstance",
      "value" : null,
      "ext" : "InlineDrawing"
      }
    ]
  }